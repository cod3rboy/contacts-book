// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/cod3rboy/contacts-book/ent/contact"
	"github.com/cod3rboy/contacts-book/ent/schema"
	"github.com/cod3rboy/contacts-book/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	contactFields := schema.Contact{}.Fields()
	_ = contactFields
	// contactDescFirstName is the schema descriptor for first_name field.
	contactDescFirstName := contactFields[0].Descriptor()
	// contact.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	contact.FirstNameValidator = contactDescFirstName.Validators[0].(func(string) error)
	// contactDescMobileNumber is the schema descriptor for mobile_number field.
	contactDescMobileNumber := contactFields[4].Descriptor()
	// contact.MobileNumberValidator is a validator for the "mobile_number" field. It is called by the builders before save.
	contact.MobileNumberValidator = func() func(string) error {
		validators := contactDescMobileNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(mobile_number string) error {
			for _, fn := range fns {
				if err := fn(mobile_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescFullName is the schema descriptor for full_name field.
	userDescFullName := userFields[0].Descriptor()
	// user.FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	user.FullNameValidator = userDescFullName.Validators[0].(func(string) error)
	// userDescEmailID is the schema descriptor for email_id field.
	userDescEmailID := userFields[2].Descriptor()
	// user.EmailIDValidator is a validator for the "email_id" field. It is called by the builders before save.
	user.EmailIDValidator = userDescEmailID.Validators[0].(func(string) error)
	// userDescMobileNumber is the schema descriptor for mobile_number field.
	userDescMobileNumber := userFields[3].Descriptor()
	// user.MobileNumberValidator is a validator for the "mobile_number" field. It is called by the builders before save.
	user.MobileNumberValidator = func() func(string) error {
		validators := userDescMobileNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(mobile_number string) error {
			for _, fn := range fns {
				if err := fn(mobile_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[4].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
}
